# This template creates VPC, subnets and all other network settings needed for EKS cluster.
# The VPC and subnets are created follow Amazon EKS best practice suggestions.
# The components created in file includes:
#   1 VPC with /16 CIDR
#   2 public subnets with /19 CIDR for worker nodes
#   2 private subnets with /19 CIDR for worker nodes
#   2 private cluster subnets with /28 CIDR for cluster creation
#   1 Internet gateway
#   1 NAT gateway for each AZ
#   1 public routetable for public subnets
#   1 private routetable for each AZ
#   1 security group for control plane
---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC modified - Private and Public subnets with best practice'

Parameters:

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicWorkerSubnet01Block:
    Type: String
    Default: 192.168.0.0/19
    Description: CidrBlock for public worker subnet 01 within the VPC

  PublicWorkerSubnet02Block:
    Type: String
    Default: 192.168.32.0/19
    Description: CidrBlock for public worker subnet 02 within the VPC

  PrivateWorkerSubnet01Block:
    Type: String
    Default: 192.168.64.0/19
    Description: CidrBlock for private worker subnet 01 within the VPC

  PrivateWorkerSubnet02Block:
    Type: String
    Default: 192.168.96.0/19
    Description: CidrBlock for private worker subnet 02 within the VPC
  
  PrivateClusterSubnet01Block:
    Type: String
    Default: 192.168.128.0/28
    Description: CidrBlock for private cluster subnet 01 within the VPC

  PrivateClusterSubnet02Block:
    Type: String
    Default: 192.168.128.16/28
    Description: CidrBlock for private cluster subnet 02 within the VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicWorkerSubnet01Block
          - PublicWorkerSubnet02Block
          - PrivateWorkerSubnet01Block
          - PrivateWorkerSubnet02Block
          - PrivateClusterSubnet01Block
          - PrivateClusterSubnet02Block

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02


  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicWorkerSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicWorkerSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicWorkerSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicWorkerSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ2'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicWorkerSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Worker Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicWorkerSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicWorkerSubnet01"
      - Key: kubernetes.io/role/elb
        Value: 1

  PublicWorkerSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Worker Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicWorkerSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicWorkerSubnet02"
      - Key: kubernetes.io/role/elb
        Value: 1

  PrivateWorkerSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Worker Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateWorkerSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateWorkerSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateWorkerSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Worker Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateWorkerSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateWorkerSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateClusterSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Cluster Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateClusterSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateClusterSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1
    
  PrivateClusterSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Cluster Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateClusterSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateClusterSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PublicWorkerSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicWorkerSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicWorkerSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicWorkerSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateWorkerSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWorkerSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateWorkerSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWorkerSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  PrivateClusterSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateClusterSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateClusterSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateClusterSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

Outputs:

  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PublicWorkerSubnet01, !Ref PublicWorkerSubnet02, !Ref PrivateWorkerSubnet01, !Ref PrivateWorkerSubnet02, !Ref PrivateClusterSubnet01, !Ref PrivateClusterSubnet02 ] ]

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
